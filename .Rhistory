basiccraps(roll)
Grading <- function(df){
mutate(df, A = ifelse(b >= 91, 1, 0))
mutate(df, B = ifelse(b <= 90, b >=81, 1, 0))
}
Grading(n)
devtools::use_testthat()
install.packages("testthat")
install.packages("testthat")
library(testthat)
devtools::use_test()
devtools::use_testthat()
USdollar_to_euro <- function(m) {
Euro <- m*.81
print(Euro)
print("exchange rate as of 2/26/2018")
}
USdollar_to_euro(5)
context("Testing currency exchange rate")
test_that("5 US dollars should equal", {
expect_equal(USdollar_to_euro(5), 4.05)
})
devtools::test()
devtools::test()
library(DStools)
test_check("DStools")
context("Testing currency exchange rate")
test_that("5 US dollars should equal", {
expect_equal(USdollar_to_euro(5), 4.05)
})
devtools::test()
devtools::test()
library(USdollar_to_euro)
test_check("DStools")
context("Testing currency exchange rate")
test_that("5 US dollars should equal", {
expect_equal(USdollar_to_euro(5), 4.05)
})
devtools::test()
context("Testing currency exchange rate")
test_that("5 US dollars should equal", {
expect_equal(USdollar_to_euro(1), .81)
})
devtools::test
library(USdollar_to_euro)
context("Testing currency exchange rate")
test_that("5 US dollars should equal", {
expect_equal(USdollar_to_euro(5), 4.05)
})
devtools::test()
devtools::test()
library(DStools)
library(USdollar_to_euro)
context("Testing currency exchange rate")
test_that("5 US dollars should equal", {
expect_equal(USdollar_to_euro(5), 4.05)
})
devtools::test()
devtools::test()
devtools::test()
library(hello.R)
library(USdollar_to_euro)
context("Testing currency exchange rate")
test_that("5 US dollars should equal", {
expect_equal(USdollar_to_euro(5), 4.05)
})
devtools::test()
devtools::test()
USdollar_to_euro <- function(m) {
Euro <- m*.81
print(Euro)
print("exchange rate as of 2/26/2018")
if(Euro < 0) {
print("You have no money")
}
}
USdollar_to_euro(-5)
USdollar_to_euro <- function(m) {
Euro <- m*.81
if(Euro >= 0){
print(Euro)
print("exchange rate as of 2/26/2018")}
else(Euro < 0) {
print("You have no money")
}
}
USdollar_to_euro(-5)
USdollar_to_euro <- function(m) {
Euro <- m*.81
if(Euro >= 0){
print(Euro)
print("exchange rate as of 2/26/2018")
}
else(Euro < 0) {
print("You have no money")
}
}
USdollar_to_euro(0)
USdollar_to_euro <- function(m) {
Euro <- m*.81
if(Euro > 0){
print(Euro)
print("exchange rate as of 2/26/2018")
}
else(Euro <= 0) {
print("You have no money")
}
}
USdollar_to_euro(0)
USdollar_to_euro <- function(m) {
Euro <- m*.81
if(Euro > 0){
print(Euro)
print("exchange rate as of 2/26/2018")
}
else if(Euro <= 0) {
print("You have no money")
}
}
USdollar_to_euro(0)
USdollar_to_euro(-9)
context("Testing currency exchange rate")
test_that("5 US dollars should equal", {
expect_equal(USdollar_to_euro(1), .81)
expect_equal(USdollar_to_euro(0), 'You have no money')
})
library(testthat)
library(hello.R)
library(USdollar_to_euro)
context("Testing currency exchange rate")
test_that("5 US dollars should equal", {
expect_equal(USdollar_to_euro(1), .81)
expect_that(USdollar_to_euro(0), prints_text("You have no money"))
})
context("Testing currency exchange rate")
test_that("Should print only + values", {
expect_equal(USdollar_to_euro(1), .81)
expect_that(USdollar_to_euro(0), prints_text("You have no money"))
})
context("Testing currency exchange rate")
test_that("Should print only + values", {
expect_equal(USdollar_to_euro(5), 4.05)
expect_that(USdollar_to_euro(0), prints_text("You have no money"))
})
library(hello.R)
library(USdollar_to_euro)
context("Testing currency exchange rate")
test_that("Should print only + values", {
expect_equal(USdollar_to_euro(5), 4.05)
expect_that(USdollar_to_euro(0), prints_text("You have no money"))
})
source("hello.r")
test_file("testthat.r")
source("hello.r", chdir = T)
test_file("testthat.r", chdir = T)
scriptPath <- function() {
getSrcDirectory(scriptPath);
}
scriptPath("hello.R")
scriptPath <- function(.R) {
getSrcDirectory(scriptPath);
}
scriptPath("hello.R")
scriptPath <- function() {
getSrcDirectory(scriptPath);
}
scriptPath(hello.R)
getSrcDirectory(hello.R)
getSrcDirectory('hello.R')
getSrcDirectory("hello.R")
scriptPath("hello.R")
source("hello.R", chdir = T)
test_file("testthat.R", chdir = T)
setwd("~/DStools")
library(testthat)
source("~/DStools/R/hello.R")
test_results <- test_dir("/DStools/R/hello.R", reporter="summary")
library(testthat)
source("/DStools/R/hello.R")
test_results <- test_dir("/DStools/R/hello.R", reporter="summary")
library(testthat)
source("/DStools/R/hello.R")
test_results <- test_dir("/DStools/R/hello.R", reporter="summary")
library(testthat)
source("~/DStools/R/hello.R")
test_results <- test_dir("~/DStools/tests/testthat.R", reporter="summary")
#After running these lines, and if everything goes well, you should see a message like this:
library(testthat)
source("~/DStools/R/hello.R")
test_results <- test_dir("~/DStools/tests/testthat.R", reporter="summary")
library(testthat)
source("~/DStools/R/currency.R")
test_results <- test_dir("~/DStools/tests/testthat.R", reporter="summary")
library(testthat)
source("~/DStools/R/currency.R")
test_results <- test_dir("~/DStools/tests/testthat.R", reporter="summary")
library(testthat)
source("~/DStools/R/currency.R")
test_results <- test_dir("~/DStools/tests/test_cur.R", reporter="summary")
USdollar_to_euro <- function(m) {
Euro <- m*.81
if(Euro > 0){
print(Euro)
print("exchange rate as of 2/26/2018")
}
else if(Euro <= 0) {
print("You have no money")
}
}
USdollar_to_euro(1)
devtools::test
devtools::test()
devtools::test
mpg
tt_cor <- function(x, y){
tt <- t.test(x,y)
c <-cor(x,y)
print(c(tt, c))
}
tt_cor(mpg$year, mpg$hwy)
basiccraps <- function(x, y) {
d1 <- sample(1:6, 1)
d2 <-sample(1:6, 1)
print('Playing Craps when the point is On')
print(paste("Dice number one,", d1), quote = FALSE)
print(paste("Dice number two,", d2), quote = FALSE)
Sum <- sum(d1, d2)
print(paste("Total", Sum), quote = FALSE)
if(Sum =='7'){
print('CRAPS, Pass the dice')
}
else if(d1 == d2){
sprintf("%i The Hard Way, roll again", Sum)
}
else {
print("Roll again")
}
}
basiccraps(roll)
basiccraps(roll)
basiccraps(roll)
basiccraps(roll)
basiccraps(roll)
basiccraps(roll)
basiccraps(roll)
basiccraps(roll)
basiccraps(roll)
CIplot <- function(sample_size = 100, cl = .95){
plot(NULL
, xlim = c(0 - 1, 0 + 1)
, ylim = c(0, 100)
, yaxt = 'n'
, xlab = "Confidence Level"
, ylab = "Samples"
)
abline(v = 0, col = 'black')
mtext(expression(mu), cex = 2, at = 0)
for(i in 1:100){
x = rnorm(sample_size)
TT <- t.test(x, conf.level = cl)
TT$conf.int
interval1 = TT$conf.int[1]
interval2 = TT$conf.int[2]
if(interval1 < 0 & interval2 > 0){
lines(c(interval1,interval2), c(i,i), lwd=2, col='black')
} else{
lines(c(interval1,interval2), c(i,i), lwd=2, col='red')
}
}
}
CIplot()
SamplingDist <- function(samples = 50, sample_size = 100, mean = 0, sd = 1){
if(samples <= 0){
stop("The number of samples needs to be greater than 0")
}
if(sd <= 0){
stop("The standard devaition cannot be != 0")
}
sampleMeans <- rep(NA, samples)
for(i in 1:samples){
x <- rnorm(sample_size, mean = mean, sd = sd)
sampleMeans[i] = mean(x)
}
return(sampleMeans)
}
SamplingDist()
SamplingDist(3)
CIplot(1)
CIplot(10)
CIplot(100)
CIplot(1000)
CIplot()
CIplot <- function(sample_size = 10000, cl = .95){
plot(NULL
, xlim = c(0 - 1, 0 + 1)
, ylim = c(0, 100)
, yaxt = 'n'
, xlab = "Confidence Level"
, ylab = "Samples"
)
abline(v = 0, col = 'black')
mtext(expression(mu), cex = 2, at = 0)
for(i in 1:100){
x = rnorm(sample_size)
TT <- t.test(x, conf.level = cl)
TT$conf.int
interval1 = TT$conf.int[1]
interval2 = TT$conf.int[2]
if(interval1 < 0 & interval2 > 0){
lines(c(interval1,interval2), c(i,i), lwd=2, col='black')
} else{
lines(c(interval1,interval2), c(i,i), lwd=2, col='red')
}
}
}
CIplot()
CIplot(1)
SamplingDist(0)
SamplingDist(,,,0)
SamplingDist <- function(samples = 50, sample_size = 100, mean = 0, sd = 1){
if(samples <= 0){
stop("The number of samples needs to be greater than 0")
}
if(sd <= 0){
stop("The standard devaition cannot be  0")
}
sampleMeans <- rep(NA, samples)
for(i in 1:samples){
x <- rnorm(sample_size, mean = mean, sd = sd)
sampleMeans[i] = mean(x)
}
return(sampleMeans)
}
SamplingDist(,,,0)
SamplingDist <- function(samples = 50, sample_size = 100, mean = 0, sd = 1){
if(samples <= 0){
stop("The number of samples needs to be greater than 0")
}
if(sd <= 0){
stop("The standard devaition cannot be 0")
}
sampleMeans <- rep(NA, samples)
for(i in 1:samples){
x <- rnorm(sample_size, mean = mean, sd = sd)
sampleMeans[i] = mean(x)
}
return(sampleMeans)
}
SamplingDist(,,,0)
SamplingDist()
SamplingDist(-6)
test_that("Sum is working", {
test_that::expect_equal(Sum = d1 + d2)
})
devtools::use_testthat()
devtools::testthat
library(DSTools)
library(testthat)
test_check("DSTools")
library(testthat)
test_check("DSTools")
library(testthat)
test_check("testthat")
library(testthat)
test_check("test_sampdis.R")
test_check("test_sampdis")
library(testthat)
test_check("DStools")
View(testthat)
View(testthat.R)
test_that("Error messages are not working properly",{
testthat::expect_error(SamplingDist(0)
, "The number of samples needs to be greater than 0")
testthat::expect_error(SamplingDist(sd = 0)
, "The standard devaition cannot be != 0")
})
test_that("length of SamplingDist does not matche the parameter", {
ss <- SamplingDist(samples = 51)
expect_equal(length(ss), 51)
})
SamplingDist(51)
test_that("length of SamplingDist does not match the parameter", {
ss <- SamplingDist(samples = 51)
expect_equal(length(ss), 51)
})
test_check(SamplingDist())
test_check(SamplingDist(51))
test_package(SamplingDist(51))
test_package(SamplingDist())
test_package(SamplingDist(samples = 51))
library(testthat)
source("DStools/R/sampdis.R")
test_results <- test_dir("DStools/tests", reporter="summary")
library(testthat)
source("~/DStools/R/sampdis.R")
library(testthat)
source("~/DStools/R/sampdis.R")
test_results <- test_dir("~/DStools/tests", reporter="summary")
library(testthat)
source("~/DStools/R/sampdis.R")
test_results <- test_dir("~/DStools/tests/test_sampdislength.R", reporter="summary")
source("~/DStools/R/sampdis.R")
test_results <- test_dir("~/DStools/tests/testthat/test_sampdislength.R", reporter="summary")
SamplingDist <- function(samples = 50, sample_size = 100, mean = 0, sd = 1){
if(samples <= 0){
stop("The number of samples needs to be greater than 0")
}
if(sd <= 0){
stop("The standard devaition cannot be 0")
}
sampleMeans <- rep(NA, samples)
for(i in 1:samples){
x <- rnorm(sample_size, mean = mean, sd = sd)
sampleMeans[i] = mean(x)
}
return(sampleMeans)
}
SamplingDist(51)
source("~/DStools/R/sampdis.R")
test_results <- test_dir("~/DStools/tests/testthat/test_sampdislength.R", reporter="summary")
test_results <- test_dir("~/DStools/tests", reporter="summary")
library(testthat)
source("~/DStools/R/sampdis.R")
test_results <- test_dir("~/DStools/tests", reporter="summary")
library(testthat)
source("~/DStools/R/sampdis.R")
test_results <- test_dir("~/DStools/tests", reporter="summary")
Fibonacci <- function(n){
a <- 0
b <- 1
for (i in 1:n){
temp <- b
b <- a
a <- a + temp
}
return(a)
}
Fibonacci(5)
test_that("Test Fibo(15)",{
phi <- (1 + sqrt(5))/2
psi <- (1 - sqrt(5))/2
expect_equal(Fibonacci(15), (phi**15 - psi**15)/sqrt(5))
})
library(testthat)
source("~/DStools/R/fibo.R")
test_results <- test_dir("~/DStools/tests", reporter="summary")
library(testthat)
source("~/DStools/R/fibo.R")
test_results <- test_dir("~/DStools/tests/testthat/test_fibo.R", reporter="summary")
library(testthat)
source("~/DStools/R/fibo.R")
test_results <- test_dir("~/DStools/tests/testthat/test_fibo", reporter="summary")
setwd("~/DStools")
source("~/DStools/R/fibo.R")
test_results <- test_dir("~/DStools/tests/testthat/test_fibo.R", reporter="summary")
library(testthat)
source("~/DStools/R/fibo.R")
test_results <- test_dir("~/DStools/tests/testthat/test_fibo.R", reporter="summary")
library(testthat)
source("~/DStools/R/fibo.R")
test_results <- test_dir("~/DStools/tests/testthat/test_fibo.R", reporter="summary")
library(testthat)
library(DSTools)
test_check("DSTools")
library(testthat)
library(DSTools)
test_check("DSTools")
library(testthat)
source("~/DStools/R/fibo.R")
test_results <- test_dir("~/DStools/tests/testthat/test_fibo.R")
library(testthat)
source("~/DStools/R/fibo.R")
test_results <- test_dir("~/DStools/tests")
library(testthat)
source("~/DStools/R/fibo.R")
test_results <- test_dir("~/DStools/tests", reporter = default_reporter())
library(testthat)
source("~/DStools/R/fibo.R")
test_results <- test_dir("~/DStools/tests", reporter = default_reporter(summary()))
c2f <- function(c) return(9/5 * c + 32)
View(Fibonacci)
View(Fibonacci)
View(Fibonacci)
test.c2f <- function() {
checkEquals(c2f(0), 32)
checkEquals(c2f(10), 50)
checkException(c2f("xx"))
}
test.c2f()
celtofar <- function(t) {return(9/5 * c + 32)}
celtofar((100
))
celtofar <- function(t) {return(9/5 * t + 32)}
celtofar((100
))
celtofar <- function(t) {return((9/5) * t + 32)}
celtofar((100
))
celtofar <- function(t) {return((9/5)t + 32)}
celtofar <- function(t) {return((9/5)*t + 32)}
celtofar((100
))
test_that("100 C = 212 F", {
temp <- celtofar(t = 100)
expect_equal(temp == 51)
})
celtofar((0))
celtofar((-0))
celtofar((-11111110))
library(testthat)
library(DSTools)
test_check("DSTools")
